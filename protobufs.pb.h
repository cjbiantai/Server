// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protobufs.proto

#ifndef PROTOBUF_protobufs_2eproto__INCLUDED
#define PROTOBUF_protobufs_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace protobuf_protobufs_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[4];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
void InitDefaultsUserInfoImpl();
void InitDefaultsUserInfo();
void InitDefaultsResponseInfoImpl();
void InitDefaultsResponseInfo();
void InitDefaultsPlayerInputImpl();
void InitDefaultsPlayerInput();
void InitDefaultsFrameDataImpl();
void InitDefaultsFrameData();
inline void InitDefaults() {
  InitDefaultsUserInfo();
  InitDefaultsResponseInfo();
  InitDefaultsPlayerInput();
  InitDefaultsFrameData();
}
}  // namespace protobuf_protobufs_2eproto
class FrameData;
class FrameDataDefaultTypeInternal;
extern FrameDataDefaultTypeInternal _FrameData_default_instance_;
class PlayerInput;
class PlayerInputDefaultTypeInternal;
extern PlayerInputDefaultTypeInternal _PlayerInput_default_instance_;
class ResponseInfo;
class ResponseInfoDefaultTypeInternal;
extern ResponseInfoDefaultTypeInternal _ResponseInfo_default_instance_;
class UserInfo;
class UserInfoDefaultTypeInternal;
extern UserInfoDefaultTypeInternal _UserInfo_default_instance_;

// ===================================================================

class UserInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:UserInfo) */ {
 public:
  UserInfo();
  virtual ~UserInfo();

  UserInfo(const UserInfo& from);

  inline UserInfo& operator=(const UserInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  UserInfo(UserInfo&& from) noexcept
    : UserInfo() {
    *this = ::std::move(from);
  }

  inline UserInfo& operator=(UserInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const UserInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UserInfo* internal_default_instance() {
    return reinterpret_cast<const UserInfo*>(
               &_UserInfo_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(UserInfo* other);
  friend void swap(UserInfo& a, UserInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UserInfo* New() const PROTOBUF_FINAL { return New(NULL); }

  UserInfo* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const UserInfo& from);
  void MergeFrom(const UserInfo& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(UserInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string user_name = 1;
  void clear_user_name();
  static const int kUserNameFieldNumber = 1;
  const ::std::string& user_name() const;
  void set_user_name(const ::std::string& value);
  #if LANG_CXX11
  void set_user_name(::std::string&& value);
  #endif
  void set_user_name(const char* value);
  void set_user_name(const char* value, size_t size);
  ::std::string* mutable_user_name();
  ::std::string* release_user_name();
  void set_allocated_user_name(::std::string* user_name);

  // string user_password = 2;
  void clear_user_password();
  static const int kUserPasswordFieldNumber = 2;
  const ::std::string& user_password() const;
  void set_user_password(const ::std::string& value);
  #if LANG_CXX11
  void set_user_password(::std::string&& value);
  #endif
  void set_user_password(const char* value);
  void set_user_password(const char* value, size_t size);
  ::std::string* mutable_user_password();
  ::std::string* release_user_password();
  void set_allocated_user_password(::std::string* user_password);

  // @@protoc_insertion_point(class_scope:UserInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr user_name_;
  ::google::protobuf::internal::ArenaStringPtr user_password_;
  mutable int _cached_size_;
  friend struct ::protobuf_protobufs_2eproto::TableStruct;
  friend void ::protobuf_protobufs_2eproto::InitDefaultsUserInfoImpl();
};
// -------------------------------------------------------------------

class ResponseInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ResponseInfo) */ {
 public:
  ResponseInfo();
  virtual ~ResponseInfo();

  ResponseInfo(const ResponseInfo& from);

  inline ResponseInfo& operator=(const ResponseInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ResponseInfo(ResponseInfo&& from) noexcept
    : ResponseInfo() {
    *this = ::std::move(from);
  }

  inline ResponseInfo& operator=(ResponseInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ResponseInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ResponseInfo* internal_default_instance() {
    return reinterpret_cast<const ResponseInfo*>(
               &_ResponseInfo_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(ResponseInfo* other);
  friend void swap(ResponseInfo& a, ResponseInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ResponseInfo* New() const PROTOBUF_FINAL { return New(NULL); }

  ResponseInfo* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ResponseInfo& from);
  void MergeFrom(const ResponseInfo& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ResponseInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string message = 1;
  void clear_message();
  static const int kMessageFieldNumber = 1;
  const ::std::string& message() const;
  void set_message(const ::std::string& value);
  #if LANG_CXX11
  void set_message(::std::string&& value);
  #endif
  void set_message(const char* value);
  void set_message(const char* value, size_t size);
  ::std::string* mutable_message();
  ::std::string* release_message();
  void set_allocated_message(::std::string* message);

  // int32 response_id = 2;
  void clear_response_id();
  static const int kResponseIdFieldNumber = 2;
  ::google::protobuf::int32 response_id() const;
  void set_response_id(::google::protobuf::int32 value);

  // int32 yourfd = 3;
  void clear_yourfd();
  static const int kYourfdFieldNumber = 3;
  ::google::protobuf::int32 yourfd() const;
  void set_yourfd(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:ResponseInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr message_;
  ::google::protobuf::int32 response_id_;
  ::google::protobuf::int32 yourfd_;
  mutable int _cached_size_;
  friend struct ::protobuf_protobufs_2eproto::TableStruct;
  friend void ::protobuf_protobufs_2eproto::InitDefaultsResponseInfoImpl();
};
// -------------------------------------------------------------------

class PlayerInput : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:PlayerInput) */ {
 public:
  PlayerInput();
  virtual ~PlayerInput();

  PlayerInput(const PlayerInput& from);

  inline PlayerInput& operator=(const PlayerInput& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PlayerInput(PlayerInput&& from) noexcept
    : PlayerInput() {
    *this = ::std::move(from);
  }

  inline PlayerInput& operator=(PlayerInput&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const PlayerInput& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PlayerInput* internal_default_instance() {
    return reinterpret_cast<const PlayerInput*>(
               &_PlayerInput_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(PlayerInput* other);
  friend void swap(PlayerInput& a, PlayerInput& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PlayerInput* New() const PROTOBUF_FINAL { return New(NULL); }

  PlayerInput* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const PlayerInput& from);
  void MergeFrom(const PlayerInput& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(PlayerInput* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string playerName = 1;
  void clear_playername();
  static const int kPlayerNameFieldNumber = 1;
  const ::std::string& playername() const;
  void set_playername(const ::std::string& value);
  #if LANG_CXX11
  void set_playername(::std::string&& value);
  #endif
  void set_playername(const char* value);
  void set_playername(const char* value, size_t size);
  ::std::string* mutable_playername();
  ::std::string* release_playername();
  void set_allocated_playername(::std::string* playername);

  // int32 yaw = 2;
  void clear_yaw();
  static const int kYawFieldNumber = 2;
  ::google::protobuf::int32 yaw() const;
  void set_yaw(::google::protobuf::int32 value);

  // int32 hori = 3;
  void clear_hori();
  static const int kHoriFieldNumber = 3;
  ::google::protobuf::int32 hori() const;
  void set_hori(::google::protobuf::int32 value);

  // int32 vect = 4;
  void clear_vect();
  static const int kVectFieldNumber = 4;
  ::google::protobuf::int32 vect() const;
  void set_vect(::google::protobuf::int32 value);

  // int32 speed = 5;
  void clear_speed();
  static const int kSpeedFieldNumber = 5;
  ::google::protobuf::int32 speed() const;
  void set_speed(::google::protobuf::int32 value);

  // int32 type = 6;
  void clear_type();
  static const int kTypeFieldNumber = 6;
  ::google::protobuf::int32 type() const;
  void set_type(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:PlayerInput)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr playername_;
  ::google::protobuf::int32 yaw_;
  ::google::protobuf::int32 hori_;
  ::google::protobuf::int32 vect_;
  ::google::protobuf::int32 speed_;
  ::google::protobuf::int32 type_;
  mutable int _cached_size_;
  friend struct ::protobuf_protobufs_2eproto::TableStruct;
  friend void ::protobuf_protobufs_2eproto::InitDefaultsPlayerInputImpl();
};
// -------------------------------------------------------------------

class FrameData : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:FrameData) */ {
 public:
  FrameData();
  virtual ~FrameData();

  FrameData(const FrameData& from);

  inline FrameData& operator=(const FrameData& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  FrameData(FrameData&& from) noexcept
    : FrameData() {
    *this = ::std::move(from);
  }

  inline FrameData& operator=(FrameData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const FrameData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FrameData* internal_default_instance() {
    return reinterpret_cast<const FrameData*>(
               &_FrameData_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    3;

  void Swap(FrameData* other);
  friend void swap(FrameData& a, FrameData& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline FrameData* New() const PROTOBUF_FINAL { return New(NULL); }

  FrameData* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const FrameData& from);
  void MergeFrom(const FrameData& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(FrameData* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .PlayerInput playerInput = 2;
  bool has_playerinput() const;
  void clear_playerinput();
  static const int kPlayerInputFieldNumber = 2;
  const ::PlayerInput& playerinput() const;
  ::PlayerInput* release_playerinput();
  ::PlayerInput* mutable_playerinput();
  void set_allocated_playerinput(::PlayerInput* playerinput);

  // int32 frameNo = 1;
  void clear_frameno();
  static const int kFrameNoFieldNumber = 1;
  ::google::protobuf::int32 frameno() const;
  void set_frameno(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:FrameData)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::PlayerInput* playerinput_;
  ::google::protobuf::int32 frameno_;
  mutable int _cached_size_;
  friend struct ::protobuf_protobufs_2eproto::TableStruct;
  friend void ::protobuf_protobufs_2eproto::InitDefaultsFrameDataImpl();
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// UserInfo

// string user_name = 1;
inline void UserInfo::clear_user_name() {
  user_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& UserInfo::user_name() const {
  // @@protoc_insertion_point(field_get:UserInfo.user_name)
  return user_name_.GetNoArena();
}
inline void UserInfo::set_user_name(const ::std::string& value) {
  
  user_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:UserInfo.user_name)
}
#if LANG_CXX11
inline void UserInfo::set_user_name(::std::string&& value) {
  
  user_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:UserInfo.user_name)
}
#endif
inline void UserInfo::set_user_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  user_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:UserInfo.user_name)
}
inline void UserInfo::set_user_name(const char* value, size_t size) {
  
  user_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:UserInfo.user_name)
}
inline ::std::string* UserInfo::mutable_user_name() {
  
  // @@protoc_insertion_point(field_mutable:UserInfo.user_name)
  return user_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UserInfo::release_user_name() {
  // @@protoc_insertion_point(field_release:UserInfo.user_name)
  
  return user_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UserInfo::set_allocated_user_name(::std::string* user_name) {
  if (user_name != NULL) {
    
  } else {
    
  }
  user_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), user_name);
  // @@protoc_insertion_point(field_set_allocated:UserInfo.user_name)
}

// string user_password = 2;
inline void UserInfo::clear_user_password() {
  user_password_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& UserInfo::user_password() const {
  // @@protoc_insertion_point(field_get:UserInfo.user_password)
  return user_password_.GetNoArena();
}
inline void UserInfo::set_user_password(const ::std::string& value) {
  
  user_password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:UserInfo.user_password)
}
#if LANG_CXX11
inline void UserInfo::set_user_password(::std::string&& value) {
  
  user_password_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:UserInfo.user_password)
}
#endif
inline void UserInfo::set_user_password(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  user_password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:UserInfo.user_password)
}
inline void UserInfo::set_user_password(const char* value, size_t size) {
  
  user_password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:UserInfo.user_password)
}
inline ::std::string* UserInfo::mutable_user_password() {
  
  // @@protoc_insertion_point(field_mutable:UserInfo.user_password)
  return user_password_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UserInfo::release_user_password() {
  // @@protoc_insertion_point(field_release:UserInfo.user_password)
  
  return user_password_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UserInfo::set_allocated_user_password(::std::string* user_password) {
  if (user_password != NULL) {
    
  } else {
    
  }
  user_password_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), user_password);
  // @@protoc_insertion_point(field_set_allocated:UserInfo.user_password)
}

// -------------------------------------------------------------------

// ResponseInfo

// string message = 1;
inline void ResponseInfo::clear_message() {
  message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ResponseInfo::message() const {
  // @@protoc_insertion_point(field_get:ResponseInfo.message)
  return message_.GetNoArena();
}
inline void ResponseInfo::set_message(const ::std::string& value) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ResponseInfo.message)
}
#if LANG_CXX11
inline void ResponseInfo::set_message(::std::string&& value) {
  
  message_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ResponseInfo.message)
}
#endif
inline void ResponseInfo::set_message(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ResponseInfo.message)
}
inline void ResponseInfo::set_message(const char* value, size_t size) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ResponseInfo.message)
}
inline ::std::string* ResponseInfo::mutable_message() {
  
  // @@protoc_insertion_point(field_mutable:ResponseInfo.message)
  return message_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ResponseInfo::release_message() {
  // @@protoc_insertion_point(field_release:ResponseInfo.message)
  
  return message_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ResponseInfo::set_allocated_message(::std::string* message) {
  if (message != NULL) {
    
  } else {
    
  }
  message_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), message);
  // @@protoc_insertion_point(field_set_allocated:ResponseInfo.message)
}

// int32 response_id = 2;
inline void ResponseInfo::clear_response_id() {
  response_id_ = 0;
}
inline ::google::protobuf::int32 ResponseInfo::response_id() const {
  // @@protoc_insertion_point(field_get:ResponseInfo.response_id)
  return response_id_;
}
inline void ResponseInfo::set_response_id(::google::protobuf::int32 value) {
  
  response_id_ = value;
  // @@protoc_insertion_point(field_set:ResponseInfo.response_id)
}

// int32 yourfd = 3;
inline void ResponseInfo::clear_yourfd() {
  yourfd_ = 0;
}
inline ::google::protobuf::int32 ResponseInfo::yourfd() const {
  // @@protoc_insertion_point(field_get:ResponseInfo.yourfd)
  return yourfd_;
}
inline void ResponseInfo::set_yourfd(::google::protobuf::int32 value) {
  
  yourfd_ = value;
  // @@protoc_insertion_point(field_set:ResponseInfo.yourfd)
}

// -------------------------------------------------------------------

// PlayerInput

// string playerName = 1;
inline void PlayerInput::clear_playername() {
  playername_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PlayerInput::playername() const {
  // @@protoc_insertion_point(field_get:PlayerInput.playerName)
  return playername_.GetNoArena();
}
inline void PlayerInput::set_playername(const ::std::string& value) {
  
  playername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PlayerInput.playerName)
}
#if LANG_CXX11
inline void PlayerInput::set_playername(::std::string&& value) {
  
  playername_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:PlayerInput.playerName)
}
#endif
inline void PlayerInput::set_playername(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  playername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PlayerInput.playerName)
}
inline void PlayerInput::set_playername(const char* value, size_t size) {
  
  playername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PlayerInput.playerName)
}
inline ::std::string* PlayerInput::mutable_playername() {
  
  // @@protoc_insertion_point(field_mutable:PlayerInput.playerName)
  return playername_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PlayerInput::release_playername() {
  // @@protoc_insertion_point(field_release:PlayerInput.playerName)
  
  return playername_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PlayerInput::set_allocated_playername(::std::string* playername) {
  if (playername != NULL) {
    
  } else {
    
  }
  playername_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), playername);
  // @@protoc_insertion_point(field_set_allocated:PlayerInput.playerName)
}

// int32 yaw = 2;
inline void PlayerInput::clear_yaw() {
  yaw_ = 0;
}
inline ::google::protobuf::int32 PlayerInput::yaw() const {
  // @@protoc_insertion_point(field_get:PlayerInput.yaw)
  return yaw_;
}
inline void PlayerInput::set_yaw(::google::protobuf::int32 value) {
  
  yaw_ = value;
  // @@protoc_insertion_point(field_set:PlayerInput.yaw)
}

// int32 hori = 3;
inline void PlayerInput::clear_hori() {
  hori_ = 0;
}
inline ::google::protobuf::int32 PlayerInput::hori() const {
  // @@protoc_insertion_point(field_get:PlayerInput.hori)
  return hori_;
}
inline void PlayerInput::set_hori(::google::protobuf::int32 value) {
  
  hori_ = value;
  // @@protoc_insertion_point(field_set:PlayerInput.hori)
}

// int32 vect = 4;
inline void PlayerInput::clear_vect() {
  vect_ = 0;
}
inline ::google::protobuf::int32 PlayerInput::vect() const {
  // @@protoc_insertion_point(field_get:PlayerInput.vect)
  return vect_;
}
inline void PlayerInput::set_vect(::google::protobuf::int32 value) {
  
  vect_ = value;
  // @@protoc_insertion_point(field_set:PlayerInput.vect)
}

// int32 speed = 5;
inline void PlayerInput::clear_speed() {
  speed_ = 0;
}
inline ::google::protobuf::int32 PlayerInput::speed() const {
  // @@protoc_insertion_point(field_get:PlayerInput.speed)
  return speed_;
}
inline void PlayerInput::set_speed(::google::protobuf::int32 value) {
  
  speed_ = value;
  // @@protoc_insertion_point(field_set:PlayerInput.speed)
}

// int32 type = 6;
inline void PlayerInput::clear_type() {
  type_ = 0;
}
inline ::google::protobuf::int32 PlayerInput::type() const {
  // @@protoc_insertion_point(field_get:PlayerInput.type)
  return type_;
}
inline void PlayerInput::set_type(::google::protobuf::int32 value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:PlayerInput.type)
}

// -------------------------------------------------------------------

// FrameData

// int32 frameNo = 1;
inline void FrameData::clear_frameno() {
  frameno_ = 0;
}
inline ::google::protobuf::int32 FrameData::frameno() const {
  // @@protoc_insertion_point(field_get:FrameData.frameNo)
  return frameno_;
}
inline void FrameData::set_frameno(::google::protobuf::int32 value) {
  
  frameno_ = value;
  // @@protoc_insertion_point(field_set:FrameData.frameNo)
}

// .PlayerInput playerInput = 2;
inline bool FrameData::has_playerinput() const {
  return this != internal_default_instance() && playerinput_ != NULL;
}
inline void FrameData::clear_playerinput() {
  if (GetArenaNoVirtual() == NULL && playerinput_ != NULL) {
    delete playerinput_;
  }
  playerinput_ = NULL;
}
inline const ::PlayerInput& FrameData::playerinput() const {
  const ::PlayerInput* p = playerinput_;
  // @@protoc_insertion_point(field_get:FrameData.playerInput)
  return p != NULL ? *p : *reinterpret_cast<const ::PlayerInput*>(
      &::_PlayerInput_default_instance_);
}
inline ::PlayerInput* FrameData::release_playerinput() {
  // @@protoc_insertion_point(field_release:FrameData.playerInput)
  
  ::PlayerInput* temp = playerinput_;
  playerinput_ = NULL;
  return temp;
}
inline ::PlayerInput* FrameData::mutable_playerinput() {
  
  if (playerinput_ == NULL) {
    playerinput_ = new ::PlayerInput;
  }
  // @@protoc_insertion_point(field_mutable:FrameData.playerInput)
  return playerinput_;
}
inline void FrameData::set_allocated_playerinput(::PlayerInput* playerinput) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete playerinput_;
  }
  if (playerinput) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      playerinput = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, playerinput, submessage_arena);
    }
    
  } else {
    
  }
  playerinput_ = playerinput;
  // @@protoc_insertion_point(field_set_allocated:FrameData.playerInput)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_protobufs_2eproto__INCLUDED
